/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conexionbbdd;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Javier
 *
 * En esta clase manejamos la interfaz con la que interactúa el usuario
 */
public class Vista extends javax.swing.JFrame {

    GestorBBDD gbbdd = new GestorBBDD();

    //Aqui se guarda la informacion de los álbumes que hay en la bbdd
    ArrayList<Album> albumes;
    //Aqui se guarda la informacion de las canciones que hay en la bbdd
    ArrayList<Cancion> canciones;

    //Nos indica en cada momento que fila de álbum esta seleccionado, en caso de que no haya ninguna seleccionada valdrá -1   
    int filaAlbumseleccionada = -1;

    /**
     * Creates new form Vista
     */
    public Vista() {

        initComponents();

        ajustarVista();

    }

    //Realiza las acciones necesarias para que cuando el usuario abrá la aplicación
    //esté todo correcto
    private void ajustarVista() {

        //Abrimos la conexión a la base de datos
        //Avisaremos alusuario de si se ha abierto con éxito o no
        if (gbbdd.abrir_conexion() == 1) {

            jLabelMostrarInfo.setText("Conectado correctamente a la base de datos");
        } else {
            jLabelMostrarInfo.setText("No se pudo conectar a la base de datos");
        }

        //Creamos la columna duración en canción
        gbbdd.addColumn();

        //Obtenemos los álbumes que hay en la base de datos
        //y con ellos llenamos la tabla
        albumes = gbbdd.getEveryAlbum();
        crearTablaAlbumes();

        //Ocultamos estos botones ya que el usuario no debe usarlos
        jButtonActualizarAlbum.setVisible(false);
        jButtonEliminarAlbum.setVisible(false);
        jButtonDeseleccionarAlbum.setVisible(false);

        jButtonActualizarCanción.setVisible(false);
        jButtonEliminarCanción.setVisible(false);
        jButtonDeseleccionarCancion.setVisible(false);
        jButtonAddCanción.setVisible(false);

        //Vacíamos el combobox 
        jComboBoxAlbunes.removeAllItems();

        //Centramos la pantalla en el monitor del usuario y la dejamos con tamaño fijo
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAddAlbum = new javax.swing.JButton();
        jLabelAddAlbum = new javax.swing.JLabel();
        jLabelNombreAlbum = new javax.swing.JLabel();
        jTextFieldNombreAlbum = new javax.swing.JTextField();
        jLabelGrupoAlbum = new javax.swing.JLabel();
        jTextFieldGrupoAlbum1 = new javax.swing.JTextField();
        jLabelYearAlbum = new javax.swing.JLabel();
        jTextFieldYearAlbum = new javax.swing.JTextField();
        jLabelMostrarInfo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAlbunes = new javax.swing.JTable();
        jButtonActualizarAlbum = new javax.swing.JButton();
        jButtonDeseleccionarAlbum = new javax.swing.JButton();
        jButtonEliminarAlbum = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCanciones = new javax.swing.JTable();
        jLabelTableAlbumes = new javax.swing.JLabel();
        jLabelTableCanciones = new javax.swing.JLabel();
        jTextFieldDuracionCancion = new javax.swing.JTextField();
        jButtonActualizarCanción = new javax.swing.JButton();
        jButtonDeseleccionarCancion = new javax.swing.JButton();
        jButtonEliminarCanción = new javax.swing.JButton();
        jButtonAddCanción = new javax.swing.JButton();
        jLabelAddCancion = new javax.swing.JLabel();
        jLabelNombreCancion = new javax.swing.JLabel();
        jTextFieldNombreCancion = new javax.swing.JTextField();
        jLabelAlbumCancion = new javax.swing.JLabel();
        jLabelDuracionCancion = new javax.swing.JLabel();
        jComboBoxAlbunes = new javax.swing.JComboBox<>();
        jLabelBuscarGrupo = new javax.swing.JLabel();
        jTextFieldBuscarNombre = new javax.swing.JTextField();
        jLabelBuscarCancion = new javax.swing.JLabel();
        jTextFieldBuscarCancion = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonAddAlbum.setText("Añadir Albúm");
        jButtonAddAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddAlbumActionPerformed(evt);
            }
        });

        jLabelAddAlbum.setText("Añadir album");

        jLabelNombreAlbum.setText("Nombre:");

        jLabelGrupoAlbum.setText("Grupo:");

        jLabelYearAlbum.setText("Año:");

        jLabelMostrarInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jTableAlbunes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Grupo", "Publicación"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAlbunes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAlbunesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAlbunes);
        if (jTableAlbunes.getColumnModel().getColumnCount() > 0) {
            jTableAlbunes.getColumnModel().getColumn(0).setResizable(false);
            jTableAlbunes.getColumnModel().getColumn(1).setResizable(false);
            jTableAlbunes.getColumnModel().getColumn(2).setResizable(false);
            jTableAlbunes.getColumnModel().getColumn(3).setResizable(false);
        }

        jButtonActualizarAlbum.setText("Actualizar Álbum");
        jButtonActualizarAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarAlbumActionPerformed(evt);
            }
        });

        jButtonDeseleccionarAlbum.setText("Deseleccionar Álbum");
        jButtonDeseleccionarAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeseleccionarAlbumActionPerformed(evt);
            }
        });

        jButtonEliminarAlbum.setText("Eliminar Álbum");
        jButtonEliminarAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarAlbumActionPerformed(evt);
            }
        });

        jTableCanciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Duración"
            }
        ));
        jTableCanciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCancionesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableCanciones);

        jLabelTableAlbumes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTableAlbumes.setText("Álbumes");

        jLabelTableCanciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTableCanciones.setText("Canciones");

        jButtonActualizarCanción.setText("Actualizar Canción");
        jButtonActualizarCanción.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarCanciónActionPerformed(evt);
            }
        });

        jButtonDeseleccionarCancion.setText("Deseleccionar Canción");
        jButtonDeseleccionarCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeseleccionarCancionActionPerformed(evt);
            }
        });

        jButtonEliminarCanción.setText("Eliminar Canción");
        jButtonEliminarCanción.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarCanciónActionPerformed(evt);
            }
        });

        jButtonAddCanción.setText("Añadir Canción");
        jButtonAddCanción.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCanciónActionPerformed(evt);
            }
        });

        jLabelAddCancion.setText("Añadir canción");

        jLabelNombreCancion.setText("Nombre:");

        jLabelAlbumCancion.setText("Álbúm:");

        jLabelDuracionCancion.setText("Duración:");

        jComboBoxAlbunes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabelBuscarGrupo.setText("Bucar álbum por nombre:");

        jTextFieldBuscarNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldBuscarNombreKeyReleased(evt);
            }
        });

        jLabelBuscarCancion.setText("Bucar canción por nombre:");

        jTextFieldBuscarCancion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldBuscarCancionKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelMostrarInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAddAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonActualizarAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonDeseleccionarAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelNombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldNombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(88, 88, 88)
                                        .addComponent(jLabelGrupoAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextFieldGrupoAlbum1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(99, 99, 99)
                                        .addComponent(jLabelYearAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextFieldYearAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonAddAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonEliminarAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelTableAlbumes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
                                .addComponent(jScrollPane2)
                                .addComponent(jLabelTableCanciones, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE))
                            .addComponent(jLabelAddCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonActualizarCanción, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(69, 69, 69)
                                        .addComponent(jButtonDeseleccionarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelNombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldNombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(88, 88, 88)
                                        .addComponent(jLabelAlbumCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxAlbunes, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(jLabelDuracionCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextFieldDuracionCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonAddCanción, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonEliminarCanción, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelBuscarGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelBuscarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldBuscarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 126, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelMostrarInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBuscarGrupo)
                    .addComponent(jTextFieldBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTableAlbumes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBuscarCancion)
                    .addComponent(jTextFieldBuscarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabelTableCanciones)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabelAddAlbum)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombreAlbum)
                    .addComponent(jTextFieldNombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGrupoAlbum)
                    .addComponent(jTextFieldGrupoAlbum1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelYearAlbum)
                    .addComponent(jTextFieldYearAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddAlbum))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonActualizarAlbum)
                    .addComponent(jButtonDeseleccionarAlbum)
                    .addComponent(jButtonEliminarAlbum))
                .addGap(67, 67, 67)
                .addComponent(jLabelAddCancion)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombreCancion)
                    .addComponent(jTextFieldNombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAlbumCancion)
                    .addComponent(jLabelDuracionCancion)
                    .addComponent(jTextFieldDuracionCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddCanción)
                    .addComponent(jComboBoxAlbunes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonActualizarCanción)
                    .addComponent(jButtonDeseleccionarCancion)
                    .addComponent(jButtonEliminarCanción))
                .addContainerGap(114, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Llena el combobox con los álbumes que hay
    //Este combobox se usa para seleccionar el ábum al que pertenece una canción
    private void llenarComboBox() {

        //Vacíamos el combobox para que no se acumulen valores
        jComboBoxAlbunes.removeAllItems();

        //Recorremos todos los álbumes y los vamos añadiendo al combobox
        for (Album a : albumes) {

            //Añadimos el nombre y el ID, por si estuviese repetido
            jComboBoxAlbunes.addItem(a.getNombre() + " (" + a.getId() + ")");
        }

        //En caso de que haya una cnción seleccionada establecemos como valor 
        //predetertiminado el album al que pertenece 
        jComboBoxAlbunes.setSelectedItem(jTableAlbunes.getModel().getValueAt(jTableAlbunes.getSelectedRow(), 1).toString()
                + " (" + jTableAlbunes.getModel().getValueAt(jTableAlbunes.getSelectedRow(), 0).toString() + ")");
    }

    //muestra en una tabla los álbunes guardados en un arraylist
    private void crearTablaAlbumes() {

        DefaultTableModel model = (DefaultTableModel) jTableAlbunes.getModel();

        //Vacíamos la tabla
        model.setRowCount(0);

        Object[] row = new Object[4];

        //vamos añadiendo cada álbum a la tabla
        for (int i = 0; i < albumes.size(); i++) {
            row[0] = albumes.get(i).getId();
            row[1] = albumes.get(i).getNombre();
            row[2] = albumes.get(i).getGrupo();
            row[3] = albumes.get(i).getPublicacion();

            model.addRow(row);
        }

    }

    //muestra en una tabla las canciones del álbum seleccionado
    private void crearTablaCanciones() {

        DefaultTableModel model = (DefaultTableModel) jTableCanciones.getModel();

        //Vacíamos la tabla
        model.setRowCount(0);

        Object[] row = new Object[4];

        //vamos añadiendo cada canción a la tabla
        for (int i = 0; i < canciones.size(); i++) {
            row[0] = canciones.get(i).getId();
            row[1] = canciones.get(i).getNombre();
            row[2] = canciones.get(i).getDuracion();

            model.addRow(row);
        }

    }

    //Al pulsar añade un album a la base de datos con los datos que ha introducido el usuario
    private void jButtonAddAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddAlbumActionPerformed

        //Primero comprobamos que no haya ningún campo vacío
        if (jTextFieldGrupoAlbum1.getText().length() > 0
                && jTextFieldNombreAlbum.getText().length() > 0 && jTextFieldYearAlbum.getText().length() > 0) {

            //Intentamos realizar la insercción
            if (gbbdd.insertarAlbum(jTextFieldNombreAlbum.getText(), 
                    jTextFieldGrupoAlbum1.getText(), jTextFieldYearAlbum.getText()) == 1) {
                
                //Si la inserción se realiza con éxito avisamos al usuario
                jLabelMostrarInfo.setText("Añadido con éxito");

                //Actualizamos la tabla de álbumes con el nuevo álbum
                crearTablaAlbumes();
                
                jButtonDeseleccionarAlbumActionPerformed(evt);
            } else {
                //Si no se ha podido realizar la insercción avisamos al usuario
                jLabelMostrarInfo.setText("No se pudo añadir");
            }
        } else {
            //En caso de que falte algún dato se lo avisamos al usuario
            jLabelMostrarInfo.setText("Datos incorrectos");
        }


    }//GEN-LAST:event_jButtonAddAlbumActionPerformed

    
    //Al pulsar un album se muestran sus datos para editarlos
    private void jTableAlbunesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAlbunesMouseClicked

        //Mostarmos la información en el formulario
        filaAlbumseleccionada = jTableAlbunes.getSelectedRow();

        jTextFieldNombreAlbum.setText(jTableAlbunes.getModel().getValueAt(filaAlbumseleccionada, 1).toString());
        jTextFieldGrupoAlbum1.setText(jTableAlbunes.getModel().getValueAt(filaAlbumseleccionada, 2).toString());
        jTextFieldYearAlbum.setText(jTableAlbunes.getModel().getValueAt(filaAlbumseleccionada, 3).toString());
        
        //Cambíamos el título de "añadir ábum" por "Modificar Álbum"
        jLabelAddAlbum.setText("Modificar Álbum");

        //Desabilitamos el botón de modificar
        jButtonAddAlbum.setVisible(false);

        //Activamos botones de edición y de añadir canción
        jButtonActualizarAlbum.setVisible(true);
        jButtonEliminarAlbum.setVisible(true);
        jButtonDeseleccionarAlbum.setVisible(true);

        jButtonAddCanción.setVisible(true);

        //Mostramos las canciones de ese álbum en la tavla de canciones
        canciones = gbbdd.getEverySong(jTableAlbunes.getModel().getValueAt(jTableAlbunes.getSelectedRow(), 0).toString());
        crearTablaCanciones();

        jButtonDeseleccionarCancionActionPerformed(null);
        

    }//GEN-LAST:event_jTableAlbunesMouseClicked

    
    //Cancela la selección del álbum
    private void jButtonDeseleccionarAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeseleccionarAlbumActionPerformed
        //Ponemos el botón de añadir visible otra vez
        jButtonAddAlbum.setVisible(true);

        //Escondemos los botones de eliminar y modificar
        jButtonActualizarAlbum.setVisible(false);
        jButtonEliminarAlbum.setVisible(false);
        jButtonDeseleccionarAlbum.setVisible(false);
        jButtonAddCanción.setVisible(false);
        
        //Vacíamos la tabla con las canciones
        DefaultTableModel model = (DefaultTableModel) jTableCanciones.getModel();
        model.setRowCount(0);

        //Vacíamos de texto los textfield que contenía la información del álbum
        jTextFieldNombreAlbum.setText("");
        jTextFieldGrupoAlbum1.setText("");
        jTextFieldYearAlbum.setText("");
        jLabelAddAlbum.setText("Añadir Álbum");

        //Deseleccionamos la columna
        jTableAlbunes.clearSelection();
        filaAlbumseleccionada = -1;

        //Deseleccionamos la canción
        jButtonDeseleccionarCancionActionPerformed(evt);

        //Vacíamos el buscador y mostramos todos los álbumes
        jTextFieldBuscarNombre.setText("");
        albumes = gbbdd.getEveryAlbum();
        crearTablaAlbumes();
    }//GEN-LAST:event_jButtonDeseleccionarAlbumActionPerformed

    //Elimina el Album seleccionado
    private void jButtonEliminarAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarAlbumActionPerformed
        
        if (gbbdd.borrarAlbum(jTableAlbunes.getModel().getValueAt(jTableAlbunes.getSelectedRow(), 0).toString()) == 1) {
            
            //Si lo realiza con éxito avisamos al usuario y actualizamos la tabla con el álbum
            jLabelMostrarInfo.setText("Eliminado correctamente");
            crearTablaAlbumes();
            jButtonDeseleccionarAlbumActionPerformed(evt);
        } else {
            //Si hay algún error avisamos al usuario
            jLabelMostrarInfo.setText("No se pudo eliminar");
        }
    }//GEN-LAST:event_jButtonEliminarAlbumActionPerformed

    //Actualiza los datos de un álbum
    private void jButtonActualizarAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarAlbumActionPerformed

        //Primero comprobamos que no haya ningún campo vacío
        if (jTextFieldGrupoAlbum1.getText().length() > 0 && jTextFieldNombreAlbum.getText().length() > 0 
                && jTextFieldYearAlbum.getText().length() > 0) {
            
            if (gbbdd.modificarAlbum(jTableAlbunes.getModel().getValueAt(filaAlbumseleccionada, 0).toString(),
                    jTextFieldNombreAlbum.getText(), jTextFieldGrupoAlbum1.getText(), jTextFieldYearAlbum.getText()) == 1) {
                //Si se ha realizado la actualización con éxito avisamos al usuario y actualizamos la
                //tabla de los álbumes con los nuevos datos
                jLabelMostrarInfo.setText("Álbum actualizado correctamente");
                crearTablaAlbumes();
                jButtonDeseleccionarAlbumActionPerformed(evt);
                
            } else {
                //Si hay error avisamos al usuario
                jLabelMostrarInfo.setText("No se pudo actualizar el álbum");
            }
            
        } else {
            
            //Si faltan datos avisamos al usuario
            jLabelMostrarInfo.setText("Datos incorrectos");
            
        }


    }//GEN-LAST:event_jButtonActualizarAlbumActionPerformed

    //Actualiza los datos de una canción
    private void jButtonActualizarCanciónActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarCanciónActionPerformed

        //vamos a obtener el id del álbum seleccionado
        String str = String.valueOf(jComboBoxAlbunes.getSelectedItem());
        String album_id = str.substring(str.indexOf("(") + 1, str.indexOf(")"));

        //Comprobamos que no haya campos vacíos
        if (jTextFieldNombreCancion.getText().length() > 0 && jTextFieldDuracionCancion.getText().length() > 0) {
            
            
            if (gbbdd.modificarCancion(jTableCanciones.getModel().getValueAt(jTableCanciones.getSelectedRow(), 0).toString(),
                    jTextFieldNombreCancion.getText(), jTextFieldDuracionCancion.getText(), album_id) == 1) {
                
                //Si se realiza la actualización con éxito avisamos al usuario
                //y actualizamos la tabla con los nuevos datos
                jLabelMostrarInfo.setText("Canción actualizada correctamente");
                canciones = gbbdd.getEverySong(jTableAlbunes.getModel().getValueAt(filaAlbumseleccionada, 0).toString());
                crearTablaCanciones();
                
                jButtonDeseleccionarCancionActionPerformed(evt);
                
            } else {
                //Si hay algún fallo avisamos al usuario
                jLabelMostrarInfo.setText("No se pudo actualizar la canción");
            }
            
        } else {
            //Si faltan datos avisamos al usuario
            jLabelMostrarInfo.setText("Datos incorrectos");
        }
    }//GEN-LAST:event_jButtonActualizarCanciónActionPerformed

    //Cancela la selección de una canción
    private void jButtonDeseleccionarCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeseleccionarCancionActionPerformed


        //Si hay algun álbum seleccionado activamos el botón de añadir canción
        if (jTableAlbunes.getSelectedRow() != -1) {
            jButtonAddCanción.setVisible(true);
        }

        //ocultamos los botones de modificar canción
        jButtonActualizarCanción.setVisible(false);
        jButtonEliminarCanción.setVisible(false);
        jButtonDeseleccionarCancion.setVisible(false);

        //Vacíamos de texto los textfield con los datos de la canción
        jTextFieldNombreCancion.setText("");
        jTextFieldDuracionCancion.setText("");
        jLabelAddCancion.setText("Añadir Canción");

        //Deseleccionamos la columna
        jTableCanciones.clearSelection();

        //ARREGLAR!!!!!!!!
        jComboBoxAlbunes.removeAllItems();
    }//GEN-LAST:event_jButtonDeseleccionarCancionActionPerformed

    //Borra una canción de la base de datos
    private void jButtonEliminarCanciónActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarCanciónActionPerformed
       
        if (gbbdd.borrarCancion(jTableCanciones.getModel().getValueAt(jTableCanciones.getSelectedRow(), 0).toString()) == 1) {
            
            //Si lo borra con éxito avisamos al usuario y actualizamos la tabla
            jLabelMostrarInfo.setText("Canción eliminada correctamente");
            crearTablaCanciones();
            jButtonDeseleccionarCancionActionPerformed(evt);
            
        } else {
            //Si da fallo avisamos al usuario
            jLabelMostrarInfo.setText("No se pudo eliminar la canción");
        }
    }//GEN-LAST:event_jButtonEliminarCanciónActionPerformed

    //Añade una canción a un albúm
    private void jButtonAddCanciónActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCanciónActionPerformed
       
        //Comprobamos que no hay ningún campo vacío
        if (jTextFieldNombreCancion.getText().length() > 0 && jTextFieldDuracionCancion.getText().length() > 0) {

            
            if (gbbdd.insertSong(jTextFieldNombreCancion.getText(), 
                    jTableAlbunes.getModel().getValueAt(jTableAlbunes.getSelectedRow(), 0).toString(), 
                    jTextFieldDuracionCancion.getText()) == 1) {

                //Si la inserción se ha realizado con éxito avisa al usuario
                //y actualizamos las tablas
                jLabelMostrarInfo.setText("Canción ñadida con éxito");
                crearTablaCanciones();
                jButtonDeseleccionarCancionActionPerformed(evt);
            } else {
                //Si hay error avisamos al usuario
                jLabelMostrarInfo.setText("No se pudo añadir la canción");
            }
        } else {
            //Si faltan datos avisamos al usuario
            jLabelMostrarInfo.setText("Datos incorrectos");
        }
    }//GEN-LAST:event_jButtonAddCanciónActionPerformed

    //Al pulsar una canción te sale información de la misma y se puede modificar
    private void jTableCancionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCancionesMouseClicked
       
        //Ponemos visibles los botones correspondientes
        jButtonActualizarCanción.setVisible(true);
        jButtonEliminarCanción.setVisible(true);
        jButtonDeseleccionarCancion.setVisible(true);

        //Mostamos la información en el formulario
        int row = jTableCanciones.getSelectedRow();

        jTextFieldNombreCancion.setText(jTableCanciones.getModel().getValueAt(row, 1).toString());

        //Puede haber canciones que no tenga la duración guardada, en tal caso se dejará el campo vacío
        if (jTableCanciones.getModel().getValueAt(row, 2) != null) {
            jTextFieldDuracionCancion.setText(jTableCanciones.getModel().getValueAt(row, 2).toString());
        } else {
            jTextFieldDuracionCancion.setText("");
        }

        //Cambiamos "Añadir canción por modificar canción"
        jLabelAddCancion.setText("Modificar Canción");

        //Impedimos que el usuario pueda añadir una canción
        jButtonAddCanción.setVisible(false);

        //Activamos botones de edición de álbum
        jButtonActualizarAlbum.setVisible(true);
        jButtonEliminarAlbum.setVisible(true);
        jButtonDeseleccionarAlbum.setVisible(true);

        llenarComboBox();
    }//GEN-LAST:event_jTableCancionesMouseClicked

    //El usuario introduce texto para ver si coinciden con el nombre de algún álbum
    private void jTextFieldBuscarNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBuscarNombreKeyReleased

        //Si hay alguna busqueda por nombre apareceran los datos coincidentes
        //Si la búsqueda está vacía aparecerán todos los datos
        if (jTextFieldBuscarNombre.getText().length() < 1) {
            albumes = gbbdd.getEveryAlbum();
        } else {
            albumes = gbbdd.getAlbumByName(jTextFieldBuscarNombre.getText());
        }

        //Vamos actualizando la tabla con los álbumes en función delos resultados
        //De la búqueda
        crearTablaAlbumes();
    }//GEN-LAST:event_jTextFieldBuscarNombreKeyReleased


    //El usuario introduce texto para ver si coinciden con el nombre de alguna canción
    private void jTextFieldBuscarCancionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBuscarCancionKeyReleased
       
        //Para realizar búsquedas tiene que haber un álbum seleccionado
        if (filaAlbumseleccionada != -1) {
            
            //Si hay alguna busqueda por nombre apareceran los datos coincidentes
        //Si la búsqueda está vacía aparecerán todos los datos
            if (jTextFieldBuscarCancion.getText().length() < 1) {

                canciones = gbbdd.getEverySong(jTableAlbunes.getModel().getValueAt(filaAlbumseleccionada, 0).toString());

            } else {

                canciones = gbbdd.getSongByName(jTableAlbunes.getModel().getValueAt(filaAlbumseleccionada, 0).toString(),
                        jTextFieldBuscarCancion.getText());

            }

            //Vamos actualizando la tabla con las canciones en función delos resultados
            //De la búqueda
            crearTablaCanciones();
        }

    }//GEN-LAST:event_jTextFieldBuscarCancionKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        System.out.println("holacewfv");
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizarAlbum;
    private javax.swing.JButton jButtonActualizarCanción;
    private javax.swing.JButton jButtonAddAlbum;
    private javax.swing.JButton jButtonAddCanción;
    private javax.swing.JButton jButtonDeseleccionarAlbum;
    private javax.swing.JButton jButtonDeseleccionarCancion;
    private javax.swing.JButton jButtonEliminarAlbum;
    private javax.swing.JButton jButtonEliminarCanción;
    private javax.swing.JComboBox<String> jComboBoxAlbunes;
    private javax.swing.JLabel jLabelAddAlbum;
    private javax.swing.JLabel jLabelAddCancion;
    private javax.swing.JLabel jLabelAlbumCancion;
    private javax.swing.JLabel jLabelBuscarCancion;
    private javax.swing.JLabel jLabelBuscarGrupo;
    private javax.swing.JLabel jLabelDuracionCancion;
    private javax.swing.JLabel jLabelGrupoAlbum;
    private javax.swing.JLabel jLabelMostrarInfo;
    private javax.swing.JLabel jLabelNombreAlbum;
    private javax.swing.JLabel jLabelNombreCancion;
    private javax.swing.JLabel jLabelTableAlbumes;
    private javax.swing.JLabel jLabelTableCanciones;
    private javax.swing.JLabel jLabelYearAlbum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAlbunes;
    private javax.swing.JTable jTableCanciones;
    private javax.swing.JTextField jTextFieldBuscarCancion;
    private javax.swing.JTextField jTextFieldBuscarNombre;
    private javax.swing.JTextField jTextFieldDuracionCancion;
    private javax.swing.JTextField jTextFieldGrupoAlbum1;
    private javax.swing.JTextField jTextFieldNombreAlbum;
    private javax.swing.JTextField jTextFieldNombreCancion;
    private javax.swing.JTextField jTextFieldYearAlbum;
    // End of variables declaration//GEN-END:variables
}
